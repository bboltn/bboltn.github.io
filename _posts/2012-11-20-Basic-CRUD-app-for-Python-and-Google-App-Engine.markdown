---
layout: post
title: Basic CRUD app for Python and Google App Engine
date: 2012-11-20
---

I wrote a very basic CRUD app for Google App Engine in Python. &nbsp;It's a basic sample on how to add, edit, delete, and list a single entity in GAE. &nbsp;I didn't see anything like this on the web when I was learning GAE. &nbsp;I hope this helps you.<br /><br />You need python 2.7 installed and Google App Engine installed to get up and running. &nbsp;I ran into one issue on Windows where nothing worked until I specified the version of python in GAE. &nbsp;I didn't have this issue on Mac OS X. <br /><br /><br /><br /><b>basiccrud.py</b><br /><pre style="background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;"><code>import webapp2<br />import cgi<br />import datetime<br />import urllib<br /><br />from google.appengine.ext import db<br />from google.appengine.api import users<br /><br />#blog###################################################<br />class BlogPost(db.Model):<br />    title = db.StringProperty()<br />    content = db.StringProperty()<br />    date = db.DateTimeProperty(auto_now_add=True)<br /><br />def BlogPostKey():<br />    return db.Key.from_path('Blog','default_blog')<br /><br />def BlogById(id):<br />    return BlogPost.get_by_id(id,parent=BlogPostKey())<br /><br /><br />#PAGES#################################################<br />class MainPage(webapp2.RequestHandler):<br />    def get(self):<br />        self.response.write(<br />            '&lt;html&gt;'<br />                '&lt;body&gt;'<br />                    '&lt;a href="/AddPost"&gt;AddPost&lt;/a&gt;')<br /><br />        BlogPosts = db.GqlQuery("select * from BlogPost order by date desc limit 10")<br /><br />        self.response.write('&lt;ul&gt;')<br /><br />        for post in BlogPosts:<br />            self.response.write('&lt;li&gt;{title} at {date} key: {key}&lt;a href="/EditPost?id={key}"&gt;Edit&lt;/a&gt;&lt;/li&gt;'<br />                .format(title=post.title,date=post.date,key=post.key().id()))<br /><br />        self.response.write('&lt;/ul&gt;')<br />        self.response.write('&lt;/body&gt;&lt;/html&gt;')<br /><br /><br />class AddPost(webapp2.RequestHandler):<br />    def get(self):<br />        self.response.write(<br />            '&lt;html&gt;'<br />                '&lt;body&gt;'<br />                '&lt;form action="/AddPost" method="POST"&gt;'<br />                    'TITLE:&lt;input type=text name=title value=""/&gt;'<br />                    '&lt;br&gt;CONTENT:&lt;input type=text name=content value=""/&gt;'<br />                    '&lt;br&gt;&lt;input type=submit text="submit"/&gt;'<br />                '&lt;/form&gt;'<br />                '&lt;/body&gt;'<br />            '&lt;/html&gt;')<br />    def post(self):<br />        title = self.request.get('title')<br />        content = self.request.get('content')<br />        newpost = BlogPost(parent=BlogPostKey())<br />        newpost.title = title<br />        newpost.content = content<br />        newpost.put()<br />        self.redirect('/')<br /><br />class EditPost(webapp2.RequestHandler):<br />    def get(self):<br />        id = int(self.request.get('id'))<br />        newpost = BlogById(id)<br />        self.response.write(<br />            '&lt;html&gt;'<br />                '&lt;body&gt;'<br />                '&lt;form action="/EditPost" method="POST"&gt;'<br />                    '&lt;input type="hidden" value="{id}" name="id"&gt;'<br />                    'TITLE:&lt;input type=text name=title value="{title}"/&gt;'<br />                    '&lt;br&gt;CONTENT:&lt;input type=text name=content value="{content}"/&gt;'<br />                    '&lt;br&gt;&lt;input type=submit value="Save"/&gt;'<br />                '&lt;/form&gt;'<br />                '&lt;form action="/DeletePost" method="POST"&gt;'<br />                    '&lt;input type="hidden" value="{id}" name="id"&gt;'<br />                    '&lt;br&gt;&lt;input type=submit value="delete"/&gt;'<br />                '&lt;/form&gt;'<br />                '&lt;/body&gt;'<br />            '&lt;/html&gt;'<br />            .format(title=newpost.title,content=newpost.content,id=newpost.key().id()))<br />    def post(self):<br />        title = self.request.get('title')<br />        content = self.request.get('content')<br />        id = int(self.request.get('id'))<br />        newpost = BlogById(id)<br />        newpost.title = title<br />        newpost.content = content<br />        newpost.put()<br />        self.redirect('/')<br /><br />class DeletePost(webapp2.RequestHandler):<br />    def post(self):<br />        id = int(self.request.get('id'))<br />        newpost = BlogById(id)<br />        newpost.delete()<br />        self.redirect('/')<br /><br /><br />app = webapp2.WSGIApplication([('/', MainPage),<br />                                ('/AddPost',AddPost),<br />                                ('/EditPost',EditPost),<br />                                ('/DeletePost',DeletePost)],<br />                              debug=True)<br /></code></pre><b>app.yaml</b><br /><pre style="background-color: #eeeeee; border: 1px dashed #999999; color: black; font-family: Andale Mono, Lucida Console, Monaco, fixed, monospace; font-size: 12px; line-height: 14px; overflow: auto; padding: 5px; width: 100%;"><code>application: basiccrud<br />version: 1<br />runtime: python27<br />api_version: 1<br />threadsafe: true<br /><br />handlers:<br />- url: /.*<br />  script: basiccrud.app<br /></code></pre>
