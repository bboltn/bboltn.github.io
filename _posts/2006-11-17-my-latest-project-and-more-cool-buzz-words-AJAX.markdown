---
layout: post
title: my latest project and more cool buzz words AJAX
date: 2006-11-17
---

My latest project is tool that prospective clients can use to determine what product they should buy from <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_0">TSYS</span>.<br /><br />It looks like a periodic table -- only upside down.  It is very strange but <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-corrected" id="SPELLING_ERROR_1">supposedly</span> very <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-corrected" id="SPELLING_ERROR_2">useful</span>.  I don't deal with that stuff so I would not know.   It was fun to make though.<br /><br />All of the data that this tool uses would fit neatly in a relational database.  Because of <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-corrected" id="SPELLING_ERROR_3">constraints</span> in <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_4">sharepoint</span>, it can not live in a database.  <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_5">Sharepoint</span> uses something called a list, to store user created data.<br /><br />So where was I going to store all this data? An idea came to me:  you could create several lists in <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_6">Sharepoint</span> then enforce a relationship between then.  With out the help of a DBMS your program needs to maintain this relationship.<br /><br />This wasn't too hard.  Instead of your traditional insert, edit, delete and select statements, I created functions that did this for me.  These functions also ensured that foreign key were correct and that I wasn't inserting a <span style="color: rgb(51, 102, 255);">string</span> when it should be an <span style="color: rgb(51, 102, 255);">int.  <span style="color: rgb(0, 0, 0);"><br /><br />The hard part came when I started running joins against this data.  This involved lots of loops and it was very slow (I have learned to respect anyone that creates a true <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_7">dbms</span> -- it must be very difficult).  A general rule in web development is pages shouldn't take longer than 3 seconds to load.  Mine took up to 10 seconds to load.<br /><br />I had read in several articles that web services and javascript, called AJAX, can make a better user experience.  This was my reason for using web services.  Until now, all my web services used SOAP to send data back and forth.  I was always the consumer of the web services and never created any.  Since SOAP is <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_8">a lot</span> of work to parse with javascript, I really didn't want to do that.  I quickly found out that you don't need <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_9">xml</span>/soap/.net at all.  <a href="http://mptsview.blogspot.com/2006/11/ahhh-web-services.html">It's just a web page.</a><br /><br />In the end I took those same pages that were slowly creating this <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_10">heatmap</span> and started calling them with my javascript.  Because the web service calls were <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-corrected" id="SPELLING_ERROR_11">asynchronous</span>, I could display a progress bar while the page loaded.  This distracts users.  They forget something is slow when they see a progress bar.  It's like dangling keys in front of a baby.<br /><br />All that's left now is creating a better administrative tool and making it look pretty. :)<br /></span></span>
