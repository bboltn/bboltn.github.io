---
layout: post
title: developing with sharepoint
date: 2006-11-17
---

I work with a product from Microsoft called <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_0">Sharepoint</span>.  It is a document management/company portal.  <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_1">Sharepoint</span> has a large API that you can use to interact with <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-corrected" id="SPELLING_ERROR_2">programmatically</span>.  Some of this API is in the form of services <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-corrected" id="SPELLING_ERROR_3">accessible</span> only from the server and others are exposed as web services.<br /><br />Initially I started working with the API services.  You can access these API services through 3 ways.  Either in web parts, apps running on the server or non-compiled <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_4">aspx</span> web pages sitting in a special layouts folder.<br /><br />First I decided to create web parts.  After creating two web parts, we realized it was too much trouble to troubleshoot and install.  There was also a really long wait to install web parts.  They required a <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_5">IIS</span> restart and we couldn't restart <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_6">IIS</span> but once a month.  Because we didn't want to wait that long we started thinking of other ways to use <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_7">sharepoint</span>.<br /><br />Next we started calling <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_8">sharepoint</span> web services from javascript.  The great thing about this is javascript pages can be loaded into <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_9">sharepoint</span> immediately.  No wait.  So now we can interact with <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_10">sharepoint</span> AND not have a long wait to install.  There are downsides.  The <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_11">Webservices</span> aren't as powerful as the services.  So there are still some things we can't do well, like permissions.<br /><br />Then we come about using the non-compiled <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_12">aspx</span> pages in our special layouts folder. Here we can put code into a special folder and only have to wait a week for an install.  This seemed to be the best so far, however since it's not compiled we can't debug with Visual Studio or get any <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-corrected" id="SPELLING_ERROR_13">useful</span> syntax error messages.  Syntax errors all say "External component caused an error."<br /><br />Of all these choice we decided on the last for most of our projects.<br /><br />But it was good that I learned the previous two because everything can be combined into one big happy <span onclick="BLOG_clickHandler(this)" class="blsp-spelling-error" id="SPELLING_ERROR_14">sharepoint</span> family.<br /><br />My latest project was actually very cool and combined most of the previous techniques and some computer science theory.<br /><br />Until next time...
